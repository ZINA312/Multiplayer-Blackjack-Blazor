// <auto-generated />
using System;
using BlackJack.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlackJack.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241202005514_UpMIgr")]
    partial class UpMIgr
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlackJack.Domain.Entities.Card", b =>
                {
                    b.Property<int>("Suit")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "suit");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.Property<Guid?>("DealerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "imageName");

                    b.Property<bool>("IsTenCard")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "isTenCard");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "isVisible");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "score");

                    b.HasKey("Suit", "Value");

                    b.HasIndex("DealerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("card");

                    b.HasAnnotation("Relational:JsonPropertyName", "cards");
                });

            modelBuilder.Entity("BlackJack.Domain.Entities.Dealer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("CardDeckId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "gameId");

                    b.Property<bool>("IsStand")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "isStand");

                    b.HasKey("Id");

                    b.HasIndex("CardDeckId");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("dealer");
                });

            modelBuilder.Entity("BlackJack.Domain.Entities.Deck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "gameId");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("deck");

                    b.HasAnnotation("Relational:JsonPropertyName", "cardDeck");
                });

            modelBuilder.Entity("BlackJack.Domain.Entities.GameSession", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentPlayerIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.HasKey("GameId");

                    b.ToTable("game");
                });

            modelBuilder.Entity("BlackJack.Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "gameId");

                    b.Property<bool>("IsStand")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "isStand");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("player");
                });

            modelBuilder.Entity("BlackJack.Domain.Entities.Card", b =>
                {
                    b.HasOne("BlackJack.Domain.Entities.Dealer", null)
                        .WithMany("Cards")
                        .HasForeignKey("DealerId");

                    b.HasOne("BlackJack.Domain.Entities.Player", null)
                        .WithMany("Cards")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("BlackJack.Domain.Entities.Dealer", b =>
                {
                    b.HasOne("BlackJack.Domain.Entities.Deck", "CardDeck")
                        .WithMany()
                        .HasForeignKey("CardDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlackJack.Domain.Entities.GameSession", "GameSession")
                        .WithOne("Dealer")
                        .HasForeignKey("BlackJack.Domain.Entities.Dealer", "GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CardDeck");

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("BlackJack.Domain.Entities.Deck", b =>
                {
                    b.HasOne("BlackJack.Domain.Entities.GameSession", "GameSession")
                        .WithOne("Deck")
                        .HasForeignKey("BlackJack.Domain.Entities.Deck", "GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("BlackJack.Domain.Entities.Player", b =>
                {
                    b.HasOne("BlackJack.Domain.Entities.GameSession", "GameSession")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("BlackJack.Domain.Entities.Dealer", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("BlackJack.Domain.Entities.GameSession", b =>
                {
                    b.Navigation("Dealer")
                        .IsRequired();

                    b.Navigation("Deck")
                        .IsRequired();

                    b.Navigation("Players");
                });

            modelBuilder.Entity("BlackJack.Domain.Entities.Player", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
