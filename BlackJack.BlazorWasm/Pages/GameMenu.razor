@using BlackJack.BlazorWasm.Services
@using BlackJack.Domain.Entities
@using BlackJack.Domain.Models
@inject IMenuService MenuService
@page "/"


<div class="menu-container">
    <div class="input-container">
        <EditForm Model="@name" OnSubmit="NameChange" style="width: 100%;">
            <p>
                <span style="background: white; border: 3px solid black;">Имя:</span><br>
                <InputText id="name" @bind-Value="name" />
                <button type="submit">Сохранить имя</button>
            </p>
        </EditForm>
        <EditForm Model="@roomName" OnSubmit="CreateRoom" style="width: 100%;">
            <p>
                <span style="background: white; border: 3px solid black;">Название комнаты:</span><br>
                <InputText id="roomName" @bind-Value="roomName" />
                <button type="submit">Создать комнату</button>
            </p>
        </EditForm>
    </div>

    <div class="room-list">
         @for (int i = 0; i < RoomsPerPage; i++)
         {
             int index = CurrentPage * RoomsPerPage + i; // Полный индекс

             if (index >= games.Items.Count)
             {
                 <div class="room-container empty-room"></div> <!-- Пустой квадрат -->
             }
             else
             {
                 var room = games.Items.ElementAt(index); // Получаем комнату по индексу
                 <div class="room-container">
                     <img src="/Hub/roomIcon.png" alt="Иконка комнаты" />
                     <p style="font-size: 20px; color: white;">@room.Name</p>
                     <NavLink  onclick="JoinGame" class="nav-link" href=@($"/room/{index}")>
                         <div class="enter-btn">
                             <span>Войти </span>
                         </div>
                     </NavLink>
                 </div>
             }
         }
        
        @* @if (games == null)
        {
            <div class="room-container empty-room"></div> <!-- Пустой квадрат -->
            <p> No games</p>
        }
        else
        {
            
            @foreach (var game in games.Items)
            {
                
                    
                    <div class="room-container">
                        <img src="/Hub/roomIcon.png" alt="Иконка комнаты" />
                        <p style="font-size: 20px; color: white;">@game.Name</p>
                        
                    </div>
                
            }
            
        } *@
    </div>

    <div class="pagination">
        <button @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Предыдущая страница</button>
        <button @onclick="NextPage" disabled="@(!HasNextPage)">Следующая страница</button>
    </div>
</div>

@code {

    private ListModel<GameSession>? games;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await MenuService.GetGameSessionsList();
            games = response.Data;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке игр: {ex.Message}");
        }
    }

    private string name = "";
    private string roomName = "";
    private Dictionary<string, int> rooms = new Dictionary<string, int>
    {
        { "Комната 1", 1 },
        { "Комната 2", 2 },
        { "Комната 3", 3 },
        { "Комната 4", 0 },
        { "Комната 5", 1 },
        { "Комната 6", 0 }
    };

    private int CurrentPage { get; set; } = 0;
    private const int RoomsPerPage = 3;

    private bool HasNextPage => (CurrentPage + 1) * RoomsPerPage < rooms.Count;
    private bool HasPreviousPage => CurrentPage > 0;

    private void NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
        }
    }

    private void PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
        }
    }

    void NameChange()
    {

    }

    void CreateRoom()
    {
        Console.WriteLine(roomName);
        if (!string.IsNullOrWhiteSpace(roomName))
        {
            MenuService.CreateGame(roomName);
        }
        else
        {
            MenuService.CreateGame(null);
        }
        roomName = ""; // Очистить поле ввода после создания комнаты
    }

    void JoinGame()
    {
        
    }
}