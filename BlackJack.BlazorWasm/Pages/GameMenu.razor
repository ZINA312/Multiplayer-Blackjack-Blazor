@using BlackJack.BlazorWasm.Services
@using BlackJack.Domain.Entities
@using BlackJack.Domain.Models
@inject IMenuService MenuService
@page "/"


<div class="menu-container">
    <div class="input-container">
        <EditForm Model="@name" OnSubmit="NameChange" style="width: 100%;">
            <p>
                <span style="background: white; border: 3px solid black;">Имя:</span><br>
                <InputText id="name" @bind-Value="name" />
                <button type="submit">Сохранить имя</button>
            </p>
        </EditForm>
        <EditForm Model="@roomName" OnSubmit="CreateRoom" style="width: 100%;">
            <p>
                <span style="background: white; border: 3px solid black;">Название комнаты:</span><br>
                <InputText id="roomName" @bind-Value="roomName" />
                <button type="submit">Создать комнату</button>
            </p>
        </EditForm>
    </div>

    <div class="room-list">

        @if (games == null)
        {
            <div class="room-container empty-room"></div> <!-- Пустой квадрат -->
            <div class="room-container empty-room"></div> <!-- Пустой квадрат -->
            <div class="room-container empty-room"></div> <!-- Пустой квадрат -->
        }
        else
        {
            @foreach (var game in games.Items)
            {
                <p>@game.Name</p>
                <div class="room-container">
                    <img src="/Hub/roomIcon.png" alt="Иконка комнаты" />
                    <p style="font-size: 20px; color: white;">@game.Name</p>
                    <NavLink onclick="JoinGame" class="nav-link" href=@($"/room/{game.GameId}")>
                        <div class="enter-btn">
                            <span>Войти (@game.Players.Count/3)</span>
                        </div>
                    </NavLink>
                </div>
            }
            for (int i = 0; i < 3 - games.Items.Count; ++i)
            {
                <div class="room-container empty-room"></div> <!-- Пустой квадрат -->
            }
        }
    </div>

    <div class="pagination">
        <button @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Предыдущая страница</button>
        <button @onclick="NextPage" disabled="@(!HasNextPage)">Следующая страница</button>
    </div>
</div>

@code {

    private ListModel<GameSession>? games;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Страница обновилась.");
        try
        {
            var response = await MenuService.GetGameSessionsList();
            games = response.Data;
            Console.WriteLine(response);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке игр: {ex.Message}");
        }
        if (games != null)
        {
            foreach (var game in games.Items)
            {
                Console.WriteLine(game.GameId);
                Console.WriteLine(game.Name);
            }
        }
    }

    private string name = "";
    private string roomName = "";

    private int CurrentPage { get; set; } = 0;
    private const int RoomsPerPage = 3;

    private bool HasNextPage => CurrentPage + 1 <= games?.TotalPages;
    private bool HasPreviousPage => CurrentPage > 0;

    private void NextPage()
    {
        if (HasNextPage)
        {
            CurrentPage++;
        }
    }

    private void PreviousPage()
    {
        if (HasPreviousPage)
        {
            CurrentPage--;
        }
    }

    void NameChange()
    {

    }

    void CreateRoom()
    {
        Console.WriteLine(roomName);
        if (!string.IsNullOrWhiteSpace(roomName))
        {
            MenuService.CreateGame(roomName);
        }
        else
        {
            MenuService.CreateGame(null);
        }
        roomName = "";
    }

    void JoinGame()
    {

    }
}